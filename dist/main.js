(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),c=n.n(i)()(r());c.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(c[d]=!0)}for(var s=0;s<e.length;s++){var p=[].concat(e[s]);o&&c[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},c=[],a=0;a<e.length;a++){var d=e[a],s=o.base?d[0]+o.base:d[0],p=i[s]||0,l="".concat(s," ").concat(p);i[s]=p+1;var u=n(l),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var h=r(m,o);o.byIndex=a,t.splice(a,0,{identifier:l,updater:h,references:1})}c.push(l)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<i.length;c++){var a=n(i[c]);t[a].references--}for(var d=o(e,r),s=0;s<i.length;s++){var p=n(i[s]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),c=n.n(i),a=n(565),d=n.n(a),s=n(216),p=n.n(s),l=n(589),u=n.n(l),m=n(426),h={};function f(e){const t=document.getElementById("content"),n=document.getElementById("project");t.removeChild(n),n.innerHTML="";const o=document.createElement("h2");o.textContent=e.title;const r=document.createElement("p");r.textContent=e.description;const i=document.createElement("p");!0!==e.completed?i.textContent="This project has not been completed.":i.textContent="This project has been completed.",n.appendChild(o),n.appendChild(r),n.appendChild(i),t.appendChild(n)}h.styleTagTransform=u(),h.setAttributes=d(),h.insert=c().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=p(),t()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;class v{constructor(e,t,n){this.title=e,this.description=t,this.completed=!1,this.todos=n||[]}markComplete(){this.completed=!0}editTitle(e){this.title=e}editDescription(e){this.description=e}addToDo(e){this.todos.push(e)}}const C=new v("First Project","It's my first project!",[]);let y=0;function b(e){y=e}function j(){return y}function E(e){const t=document.getElementById("project-list");if(t.innerHTML="",Array.isArray(e.projects))for(let n=0;n<e.projects.length;n++){const o=e.projects[n],r=document.createElement("li");r.textContent=o.title,r.addEventListener("click",(()=>{f(o),b(n)})),t.appendChild(r)}document.getElementById("portfolio").appendChild(t)}function g(){const e=document.createElement("form"),t=document.createElement("label");t.textContent="Title:",e.appendChild(t);const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name","title"),e.appendChild(n);const o=document.createElement("label");o.textContent="Description:",e.appendChild(o);const r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("name","description"),e.appendChild(r);const i=document.createElement("button");return i.textContent="Submit",e.appendChild(i),e}function x(e){return{title:e.get("title"),description:e.get("description"),array:[]}}const T=new class{constructor(e){this.projects=e}addProject(e){this.projects.push(e)}removeProject(e){this.projects.splice(e,1)}}([]);T.addProject(C);const I=document.getElementById("content"),w=document.createElement("div");w.id="portfolio";const P=document.createElement("div");P.id="project",I.appendChild(w),I.appendChild(P),function(e){document.getElementById("content");const t=document.getElementById("portfolio"),n=document.createElement("h1");n.textContent="My Portfolio",t.appendChild(n);const o=document.createElement("ul");o.setAttribute("id","project-list"),t.appendChild(o);const r=document.createElement("button");r.id="new-project-button",r.textContent="New Project",r.addEventListener("click",(()=>{const n=g();t.removeChild(r),t.removeChild(i),t.removeChild(c),n.addEventListener("submit",(o=>{o.preventDefault();const a=new FormData(o.target),{title:d,description:s,array:p}=x(a),l=new v(d,s,p);e.addProject(l),t.removeChild(n),f(l),b(e.projects.length-1),E(e),t.appendChild(r),t.appendChild(i),t.appendChild(c)})),t.appendChild(n)}));const i=document.createElement("button");i.id="edit-project-button",i.textContent="Edit Project",i.addEventListener("click",(()=>{const n=g();t.removeChild(r),t.removeChild(i),t.removeChild(c),n.addEventListener("submit",(o=>{o.preventDefault();const a=new FormData(o.target),{title:d,description:s}=x(a);let p=j();e.projects[p].title=d,e.projects[p].description=s,t.removeChild(n),E(e),t.appendChild(r),t.appendChild(i),t.appendChild(c),f(e.projects[p])})),t.appendChild(n)}));const c=document.createElement("button");c.id="remove-project-button",c.textContent="Delete Project",c.addEventListener("click",(()=>{if(e.projects.length>1){console.log("olo"),t.removeChild(r),t.removeChild(i),t.removeChild(c);let n=j();e.removeProject(n),E(e),t.appendChild(r),t.appendChild(i),t.appendChild(c),b(0),n=j(),f(e.projects[n])}})),E(e),t.appendChild(r),t.appendChild(i),t.appendChild(c)}(T),f(C)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,