(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(537),i=n.n(o),r=n(645),d=n.n(r)()(i());d.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const c=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var c=0;c<this.length;c++){var a=this[c][0];null!=a&&(d[a]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);o&&d[p[0]]||(void 0!==r&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=r),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},d=[],c=0;c<e.length;c++){var a=e[c],l=o.base?a[0]+o.base:a[0],p=r[l]||0,s="".concat(l," ").concat(p);r[l]=p+1;var u=n(s),m={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var h=i(m,o);o.byIndex=c,t.splice(c,0,{identifier:s,updater:h,references:1})}d.push(s)}return d}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var r=o(e=e||[],i=i||{});return function(e){e=e||[];for(var d=0;d<r.length;d++){var c=n(r[d]);t[c].references--}for(var a=o(e,i),l=0;l<r.length;l++){var p=n(r[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}r=a}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,i&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),i=n.n(o),r=n(569),d=n.n(r),c=n(565),a=n.n(c),l=n(216),p=n.n(l),s=n(589),u=n.n(s),m=n(426),h={};h.styleTagTransform=u(),h.setAttributes=a(),h.insert=d().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=p(),t()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;class C{constructor(e,t,n,o,i){this.title=e,this.description=t,this.priority=o,this.notes=i,this.dueDate=n,this.completed=!1}markComplete(){this.completed=!0}editTitle(e){this.title=e}editDescription(e){this.description=e}editDueDate(e){this.dueDate=e}editPriority(e){this.priority=e}editNote(e){this.note=e}}function v(e){const t=document.getElementById("content"),n=document.getElementById("project");t.removeChild(n),n.innerHTML="";const o=document.createElement("h2");o.textContent=e.title;const i=document.createElement("p");i.textContent=e.description;const r=document.createElement("p");!0!==e.completed?r.textContent="This project has not been completed.":r.textContent="This project has been completed.";const d=document.createElement("div");d.setAttribute("id","todo-container");const c=document.createElement("label");c.textContent="To-do Items: ",d.appendChild(c);const a=document.createElement("button");a.textContent="New ToDo",a.addEventListener("click",(()=>{const t=function(){const e=document.createElement("form");e.setAttribute("id","new-todo");const t=document.createElement("textarea");t.setAttribute("maxlength","50"),t.setAttribute("required","true"),t.setAttribute("name","title");const n=document.createElement("label");n.setAttribute("for","titleLabel"),n.textContent="Title: ";const o=document.createElement("textarea");o.setAttribute("maxlength","100"),o.setAttribute("name","description");const i=document.createElement("label");i.setAttribute("for","descriptionLabel"),i.textContent="Description: ";const r=document.createElement("label");r.setAttribute("for","priorityLabel"),r.textContent="Priority Level: ";const d=document.createElement("input");d.setAttribute("type","radio"),d.setAttribute("name","priority"),d.setAttribute("value","1 (low)"),d.setAttribute("checked",!0);const c=document.createElement("label");c.textContent="Low";const a=document.createElement("input");a.setAttribute("type","radio"),a.setAttribute("name","priority"),a.setAttribute("value","2 (medium)");const l=document.createElement("label");l.textContent="Medium";const p=document.createElement("input");p.setAttribute("type","radio"),p.setAttribute("name","priority"),p.setAttribute("value","3 (high)");const s=document.createElement("label");s.textContent="High";const u=document.createElement("textarea");u.setAttribute("maxlength","250"),u.setAttribute("name","notes");const m=document.createElement("label");m.setAttribute("for","notesLabel"),m.textContent="Notes: ";const h=document.createElement("input");h.setAttribute("type","date"),h.setAttribute("name","dueDate");const C=document.createElement("label");C.setAttribute("for","dueDateLabel"),C.textContent="Due Date: ";const v=document.createElement("button");return v.textContent="Create ToDo",e.appendChild(n),e.appendChild(t),e.appendChild(document.createElement("br")),e.appendChild(i),e.appendChild(o),e.appendChild(document.createElement("br")),e.appendChild(r),e.appendChild(d),e.appendChild(c),e.appendChild(a),e.appendChild(l),e.appendChild(p),e.appendChild(s),e.appendChild(document.createElement("br")),e.appendChild(m),e.appendChild(u),e.appendChild(document.createElement("br")),e.appendChild(C),e.appendChild(h),e.appendChild(document.createElement("br")),e.appendChild(v),e}();n.removeChild(a),n.appendChild(t),t.addEventListener("submit",(o=>{o.preventDefault();const i=new FormData(o.target),{title:r,desc:d,priority:c,notes:a,dueDate:l}=function(e){return{title:e.get("title"),desc:e.get("description"),priority:e.get("priority"),notes:e.get("notes"),dueDate:e.get("dueDate")}}(i),p=new C(r,d,l,c,a);e.addToDo(p),n.removeChild(t),v(e)}))})),n.appendChild(o),n.appendChild(i),n.appendChild(r),n.appendChild(d),n.appendChild(a),t.appendChild(n),function(e){const t=document.getElementById("todo-container");if(Array.isArray(e.todos))for(let n=0;n<e.todos.length;n++){const o=document.createElement("div"),i=document.createElement("div"),r=document.createElement("label");r.textContent="Item #"+(n+1)+": ";const d=document.createElement("input");d.setAttribute("type","text"),d.value=e.todos[n].title,i.appendChild(r),i.appendChild(d);const c=document.createElement("div"),a=document.createElement("label");a.textContent="Description: ";const l=document.createElement("input");l.setAttribute("type","text"),l.value=e.todos[n].description,c.appendChild(a),c.appendChild(l);const p=document.createElement("div"),s=document.createElement("label"),u=document.createElement("div");s.textContent="Priority: ",u.textContent=e.todos[n].priority,p.appendChild(s),p.appendChild(u);const m=document.createElement("div"),h=document.createElement("label");h.textContent="Notes: ";const C=document.createElement("input");C.setAttribute("type","text"),C.value=e.todos[n].notes,m.appendChild(h),m.appendChild(C);const b=document.createElement("div"),E=document.createElement("label");E.textContent="Due date: ";const f=document.createElement("input");f.setAttribute("type","date"),f.value=e.todos[n].dueDate,b.appendChild(E),b.appendChild(f);const y=document.createElement("button");y.textContent="Delete ToDo",d.addEventListener("click",(()=>{const t=document.createElement("input");t.type="text",t.value=d.value,i.replaceChild(t,d),t.addEventListener("blur",(()=>{d.value=t.value,e.todos[n].editTitle(t.value),v(e),r.textContent="Todo "+n+": "}))})),u.addEventListener("click",(()=>{const t=document.createElement("div");t.classList.add("priority-options"),["1 (low)","2 (medium)","3 (high)","Ignore"].forEach((o=>{const i=document.createElement("input");i.setAttribute("type","radio"),i.setAttribute("name","priority"),i.setAttribute("value",o),o===e.todos[n].priority&&(i.checked=!0);const r=document.createElement("label");r.textContent=o;const d=document.createElement("div");d.appendChild(i),d.appendChild(r),t.appendChild(d)})),p.replaceChild(t,u),t.addEventListener("change",(t=>{const o=t.target.value;"Ignore"!==o&&(e.todos[n].priority=o),v(e)}))})),l.addEventListener("click",(()=>{const t=document.createElement("input");t.type="text",t.value=l.textContent,c.replaceChild(t,l),t.addEventListener("blur",(()=>{l.textContent=t.value,e.todos[n].editDescription(t.value),v(e)}))})),C.addEventListener("click",(()=>{const t=document.createElement("input");t.type="text",t.value=C.textContent,m.replaceChild(t,C),t.addEventListener("blur",(()=>{d.textContent=t.value,e.todos[n].notes=t.value,v(e)}))})),f.addEventListener("click",(()=>{const t=document.createElement("input");t.type="date",t.value=e.todos[n].dueDate,b.replaceChild(t,f),t.addEventListener("change",(()=>{f.textContent=t.value,e.todos[n].editDueDate(t.value),v(e)}))})),y.addEventListener("click",(()=>{e.todos.splice(n,1),v(e)})),o.appendChild(i),o.appendChild(c),o.appendChild(p),o.appendChild(m),o.appendChild(b),o.appendChild(y),t.appendChild(o)}}(e)}class b{constructor(e,t,n){this.title=e,this.description=t,this.completed=!1,this.todos=n||[]}markComplete(){this.completed=!0}editTitle(e){this.title=e}editDescription(e){this.description=e}addToDo(e){this.todos.push(e)}}const E=new b("First Project","It's my first project!",[]);let f=0;function y(e){f=e}function x(){return f}function g(e){const t=document.getElementById("project-list");if(t.innerHTML="",Array.isArray(e.projects))for(let n=0;n<e.projects.length;n++){const o=e.projects[n],i=document.createElement("li");i.textContent=o.title,i.addEventListener("click",(()=>{v(o),y(n)})),t.appendChild(i)}document.getElementById("portfolio").appendChild(t)}function A(){const e=document.createElement("form"),t=document.createElement("label");t.textContent="Title:",e.appendChild(t);const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("name","title"),e.appendChild(n);const o=document.createElement("label");o.textContent="Description:",e.appendChild(o);const i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("name","description"),e.appendChild(i);const r=document.createElement("button");return r.textContent="Submit",e.appendChild(r),e}function j(e){return{title:e.get("title"),description:e.get("description"),array:[]}}const D=new class{constructor(e){this.projects=e}addProject(e){this.projects.push(e)}removeProject(e){this.projects.splice(e,1)}}([]);D.addProject(E);const L=document.getElementById("content"),T=document.createElement("div");T.id="portfolio";const w=document.createElement("div");w.id="project",L.appendChild(T),L.appendChild(w),function(e){document.getElementById("content");const t=document.getElementById("portfolio"),n=document.createElement("h1");n.textContent="My Portfolio",t.appendChild(n);const o=document.createElement("ul");o.setAttribute("id","project-list"),t.appendChild(o);const i=document.createElement("button");i.id="new-project-button",i.textContent="New Project",i.addEventListener("click",(()=>{const n=A();t.removeChild(i),t.removeChild(r),t.removeChild(d),t.removeChild(c),n.addEventListener("submit",(o=>{o.preventDefault();const a=new FormData(o.target),{title:l,description:p,array:s}=j(a),u=new b(l,p,s);e.addProject(u),t.removeChild(n),v(u),y(e.projects.length-1),g(e),t.appendChild(i),t.appendChild(r),t.appendChild(d),t.appendChild(c)})),t.appendChild(n)}));const r=document.createElement("button");r.id="edit-project-button",r.textContent="Edit Project",r.addEventListener("click",(()=>{const n=A();t.removeChild(i),t.removeChild(r),t.removeChild(d),t.removeChild(c),n.addEventListener("submit",(o=>{o.preventDefault();const a=new FormData(o.target),{title:l,description:p}=j(a);let s=x();e.projects[s].title=l,e.projects[s].description=p,t.removeChild(n),g(e),t.appendChild(i),t.appendChild(r),t.appendChild(d),t.appendChild(c),v(e.projects[s])})),t.appendChild(n)}));const d=document.createElement("button");d.id="remove-project-button",d.textContent="Delete Project",d.addEventListener("click",(()=>{if(e.projects.length>1){t.removeChild(i),t.removeChild(r),t.removeChild(d),t.removeChild(c);let n=x();e.removeProject(n),g(e),t.appendChild(i),t.appendChild(r),t.appendChild(d),t.appendChild(c),y(0),n=x(),v(e.projects[n])}}));const c=document.createElement("button");c.id="complete-project-button",c.textContent="Change Completion Status",c.addEventListener("click",(()=>{t.removeChild(i),t.removeChild(r),t.removeChild(d),t.removeChild(c);let n=x();!0===e.projects[n].completed?e.projects[n].completed=!1:e.projects[n].completed=!0,t.appendChild(i),t.appendChild(r),t.appendChild(d),t.appendChild(c),v(e.projects[n])})),g(e),t.appendChild(i),t.appendChild(r),t.appendChild(d),t.appendChild(c)}(D),v(E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,